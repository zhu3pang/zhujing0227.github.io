# -*-mode:org;coding:utf-8-*-
# Created:  zhuji 02/12/2020
# Modified: zhuji 02/12/2020 16:21

#+OPTIONS: toc:nil num:nil
#+BIND: org-html-link-home "https://zhujing0227.github.io/images"
#+TITLE: 排序之插入排序

#+begin_export md
---
layout: post
title: 排序之插入排序
categories: Algorithm
tags: [Algorithm, sort]
comments: true
---
#+end_export

* 插入排序

插入排序的思想是每次循环, 数组元素 A[0,i-1]都是排好序的, 循环结束后数组所有的元素都是排好序的. 适用于排序的数据量很小, 或者若已知输入元素大致上按照顺序排列.如果比较操作的代价比交换操作大的话, 可以采用二分查找法来减少比较操作的数目.该算法可以认为是插入排序的一个变种, 称为二分查找插入排序.

伪代码:
#+begin_example
insert-sort(A):O(n^2)
for i = 1 to A.length-1
  key = A[i]
  //insert A[i] into the sorted sequence A[0..i-1]
  j=i-1
  while j>=0 and A[j]>key
      a[j+1]=A[j]
      j--

  A[j+1]=key

#+end_example

** Java 实现
   #+BEGIN_SRC java
     private static int[] insertSort(int[] arr) {
         if (arr == null || arr.length <= 1) {
             return arr;
         }
         for (int i = 1; i < arr.length; i++) {
             int key = arr[i], j = i - 1;
             // while (j >= 0 && arr[j] > key) {
             //     arr[j + 1] = arr[j];
             //     j--;
             // }
             // arr[j + 1] = key;

             //binary-search: find the first larger than the key in arr[0..i-1], and insert before it.   时间复杂度 O(lg i)
             int low = 0, high = i - 1, mid;
             while (low <= high){
                 mid = low + ((high - low) >> 1);
                 if (arr[mid] > key) {
                     high = mid - 1;
                 } else {
                     low = mid + 1;
                 }
             }
             if (low < i && arr[low] > key) {
                 System.arraycopy(arr, low, arr, low + 1, i - low);
                 arr[low] = key;
             }
         }
         return arr;
     }

   #+END_SRC

** 递归实现
   #+BEGIN_SRC java
     /**
      ,* n 初始值 = arr.length()-1
      ,*/
     private static int[] insertSortWithRecursive(int[] arr, int n){
         if (arr == null || arr.length <= 1) {
             return arr;
         }
         if (n >= 1) {
             insertSortWithRecursive(arr, n - 1);
             int key = arr[n], j = n - 1;
             while (j >= 0 && arr[j] > key) {
                 arr[j + 1] = arr[j];
                 j--;
             }
             arr[j + 1] = key;
             //while 循环可以用上面的二分查找替换, 时间复杂度 O(lg i)
         }

         return arr;
     }

   #+END_SRC

# -*-mode:org;coding:utf-8-*-
# Created:  zhuji 02/12/2020
# Modified: zhuji 02/12/2020 17:28

#+OPTIONS: toc:nil num:nil
#+BIND: org-html-link-home "https://zhujing0227.github.io/images"
#+TITLE: lambda 尾递归优化

#+begin_export md
---
layout: post
title: lambda 尾递归优化
categories: java8
tags: [java8]
comments: true
---
#+end_export

* lambda 尾递归优化
  #+BEGIN_SRC java
    /**
     ,* description: TailInvoke
     ,* 尾递归调用工具类
     ,*
     ,* @author: zhuji
     ,* @date: Create at 2018/1/26 10:28
     ,*/
    public class TailInvoke {
        /**
         ,* 统一结构的方法,获得当前递归的下一个递归
         ,*
         ,* @param nextFrame 下一个递归
         ,* @param <T>       T
         ,* @return 下一个递归
         ,*/
        public static <T> TailRecursion<T> call(final TailRecursion<T> nextFrame) {
            return nextFrame;
        }

        /**
         ,* 结束当前递归，重写对应的默认方法的值,完成状态改为 true,设置最终返回结果,设置非法递归调用
         ,*
         ,* @param value 最终递归值
         ,* @param <T>   T
         ,* @return 一个 isFinished 状态 true 的尾递归, 外部通过调用接口的 invoke 方法及早求值, 启动递归求值。
         ,*/
        public static <T> TailRecursion<T> done(T value) {
            return new TailRecursion<T>() {
                @Override
                public TailRecursion<T> apply() {
                    throw new RuntimeException("Illegal function call, recursion has finished! ");
                }

                @Override
                public boolean isFinished() {
                    return true;
                }

                @Override
                public T getResult() {
                    return value;
                }
            };
        }
    }

    /**
     ,* description: TailRecursion
     ,*
     ,* @author: zhuji
     ,* @date: Create at 2018/1/26 10:23
     ,*/

    @FunctionalInterface
    public interface TailRecursion<T> {

        /**
         ,* 用于递归栈帧之间的连接,惰性求值
         ,*
         ,* @return 下一个递归栈帧
         ,*/
        TailRecursion<T> apply();

        /**
         ,* 判断当前递归是否结束
         ,*
         ,* @return 默认为 false, 因为正常的递归过程中都还未结束
         ,*/
        default boolean isFinished() {
            return false;
        }

        /**
         ,* 获得递归结果,只有在递归结束才能调用,这里默认给出异常,通过工具类的重写来获得值
         ,*
         ,* @return 递归最终结果
         ,*/
        default T getResult() {
            throw new RuntimeException("recursion does not implement!");
        }

        /**
         ,* 及早求值,执行者一系列的递归,因为栈帧只有一个,所以使用 findFirst 获得最终的栈帧,接着调用 getResult 方法获得最终递归值
         ,*
         ,* @return 及早求值, 获得最终递归结果
         ,*/
        default T invoke() {
            return Stream.iterate(this, TailRecursion::apply)
                    .filter(TailRecursion::isFinished)
                    .findFirst()
                    .orElseThrow(() -> new RuntimeException("没有完结状态的栈帧"))
                    .getResult();
        }
    }

  #+END_SRC

* 使用 lambda 尾递归优化
  #+BEGIN_SRC java
    private static long fib(int n) {
        /*long[] a = new long[n];
        a[0] = 0;
        a[1] = 1;
        for (int i = 2; i < n; i++) {
            a[i] = a[i - 1] + a[i - 2];
        }
        return a[n - 1];*/
        if (n <= 1) return n;
        return fib(n - 1) + fib(n - 2);
    }

    private static TailRecursion<Long> fibRecursive(int n, long a, long b) {
        if (n == 1) return TailInvoke.done(a);
        return TailInvoke.call(() -> fibRecursive(n - 1, b, a + b));
    }

    private static TailRecursion<Long> factorialRecursive(long n, long num) {
        if (n == 1L) return TailInvoke.done(num);
        return TailInvoke.call(() -> factorialRecursive(n - 1, n + num));
    }

    private static long factorial(int n) {
        if (n == 1) return n;
        return n + factorial(n - 1);
    }

  #+END_SRC

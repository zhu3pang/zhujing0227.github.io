# -*-mode:org;coding:utf-8-*-
# Created:  zhuji 02/12/2020
# Modified: zhuji 02/12/2020 16:32

#+OPTIONS: toc:nil num:nil
#+BIND: org-html-link-home "https://zhujing0227.github.io/images"
#+TITLE: 二分搜索拓展

#+begin_export md
---
layout: post
title: 二分搜索拓展
categories: Algorithm
tags: [algorithm, binary search]
comments: true
---
#+end_export

* 二分搜索
  二分搜索是一种在有序数组中查找某一特定元素的搜索算法.搜索过程从数组的中间元素开始, 如果中间元素正好是要查找的元素, 则搜索过程结束；如果某一特定元素大于或者小于中间元素, 则在数组大于或小于中间元素的那一半中查找, 而且跟开始一样从中间元素开始比较.如果在某一步骤数组为空, 则代表找不到.这种搜索算法每一次比较都使搜索范围缩小一半.

  搜索过程:
  2. 令 L 为 0, R 为 n-1.
  3. 如果 L>R, 则搜索以失败告终.
  4. 令 m(中间值元素）为(L+R)/2.
  5. 如果 A[m]<K, 令 L 为 m+1 并回到步骤二.
  6. 如果 A[m]>T, 令 R 为 m-1 并回到步骤二.
  7. 当 m=T, 搜索结束, 回传值 m.

* Java 实现二分法查找
  #+BEGIN_SRC java
    /**
     ,* 二分查找 O(lg n)
     ,*
     ,* @param arr
     ,* @param key
     ,* @return
     ,*/
    private static int binarySearch(int[] arr, int key) {
        int low = 0, high = arr.length - 1, mid;
        while (low <= high) {
            mid = low + ((high - low) >>> 1);
            if (arr[mid] > key) {
                high = mid - 1;
            } else if (arr[mid] < key) {
                low = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }

    //递归实现
    private static int binarySearchRecursive(int[] arr, int low, int high, int key) {
        if (low > high) {
            return -1;
        }
        int mid = low + ((high - low) >>> 1);
        if (arr[mid] > key) {
            return binarySearchRecursive(arr, low, mid - 1, key);
        } else if (arr[mid] < key) {
            return binarySearchRecursive(arr, mid + 1, high, key);
        }
        return mid;
    }

  #+END_SRC

* 拓展

** 1. 二分法查找第一个等于 key 的下标
   #+BEGIN_SRC java
     /**
      ,* 二分查找第一个等于 key 的下标  O(lg n)
      ,* [1,2,2,3] key=2, return 1
      ,* @param arr
      ,* @param key
      ,* @return
      ,*/
     private static int binarySearchFirst(int[] arr, int key) {
         int low = 0, high = arr.length - 1, mid;
         while (low <= high) {
             mid = low + ((high - low) >>> 1);
             if (arr[mid] >= key) {
                 high = mid - 1;
             } else {
                 low = mid + 1;
             }
         }
         if (low < arr.length && arr[low] == key) {
             return low;
         }
         return -1;
     }

   #+END_SRC

** 2. 二分法查找最后一个等于 key 的下标
   #+BEGIN_SRC java
     /**
      ,* 二分查找最后一个等于 key 的下标 O(lg n)
      ,* [1,2,2,3] key=2, return 2
      ,* @param arr
      ,* @param key
      ,* @return
      ,*/
     private static int binarySearchLast(int[] arr, int key) {
         int low = 0, high = arr.length - 1, mid;
         while (low <= high) {
             mid = low + ((high - low) >>> 1);
             if (arr[mid] > key) {
                 high = mid - 1;
             } else {
                 low = mid + 1;
             }
         }
         if (high >= 0 && arr[high] == key) {
             return high;
         }
         return -1;
     }

   #+END_SRC

** 3. 二分法查找第一个比 key 大的下标
   #+BEGIN_SRC java

     /**
      ,* 二分法查找第一个比 key 大的下标  O(lg n)
      ,* [1, 2, 3, 3, 3, 3, 4] key=2, return 2
      ,* @param arr
      ,* @param key
      ,* @return
      ,*/
     private static int binarySearchFirstLarger(int[] arr, int key) {
         int low = 0, high = arr.length - 1, mid;
         while (low <= high) {
             mid = low + ((high - low) >>> 1);
             if (arr[mid] > key) {
                 high = mid - 1;
             } else {
                 low = mid + 1;
             }
         }
         if (low < arr.length && arr[low] > key) {
             return low;
         }
         return -1;
     }

   #+END_SRC

** 4. 二分法查找最后一个比 key 小的下标
   #+BEGIN_SRC java
     /**
      ,* 二分法查找最后一个比 key 小的下标 O(lg n)
      ,* [1, 2, 3, 3, 3, 3, 4] key=4, return 5
      ,* @param arr
      ,* @param key
      ,* @return
      ,*/
     private static int binarySearchLastSmaller(int[] arr, int key) {
         int low = 0, high = arr.length - 1, mid;
         while (low < high) {
             mid = low + ((high - low) >>> 1);
             if (arr[mid] >= key) {
                 high = mid - 1;
             } else {
                 low = mid + 1;
             }
         }
         if (high >= 0 && arr[high] < key) {
             return high;
         }
         return -1;
     }

   #+END_SRC

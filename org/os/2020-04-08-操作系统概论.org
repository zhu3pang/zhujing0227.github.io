# -*-mode:org;coding:utf-8-*-
# Created:  zhuji 04/08/2020
# Modified: zhuji 04/08/2020 14:09

#+OPTIONS: toc:nil num:nil
#+BIND: org-html-link-home "https://zhujing0227.github.io/images"
#+TITLE: 操作系统概论

#+begin_export md
---
layout: post
title: 操作系统概论
categories: os
tags: [os]
comments: true
---
#+end_export


* 绪论
** What is OS
应用程序和硬件之间的媒介.
- 平台性
- 资源管理分配
- 资源监控
** What is a good OS
- 方便
- 硬件的高效利用
- 整体可靠、稳定、安全
*  操作系统结构
** 图形接口
** System Call
* 进程
** 进程的状态
1. new
2. ready
3. running
4. waiting
5. terminated
** PCB
进程控制块. [[https://blog.csdn.net/gatieme/article/details/51383272][进程描述符]]
基于『局部性原理』操作系统一般是使用数组去管理所有的进程.
** 进程的创建
*** fork()
fork 出来的子进程除了进程号以外，其他与父进程完全一样。下面的代码，父进程等待子进
程结束后打印一句话后退出。
#+BEGIN_SRC c
  #include <sys/types.h>
  #include <stdio.h>
  #include <unistd.h>
  #include <stdlib.h>

  int main()
  {
      pid_t pid;
      /* fork another process */
      pid = fork();
      printf("Child");
      sleep(1);
      if(pid < 0){/* error occurred */
          fprintf(stderr, "fork error");
          exit(-1);
      }
      else if(pid == 0){/* child process */
          execlp("/usr/bin/top", "top", NULL);
      }
      else {/* parent process */
          wait(NULL);
          printf("Complete Child\n");
          exit(0);
      }
  }  
#+END_SRC

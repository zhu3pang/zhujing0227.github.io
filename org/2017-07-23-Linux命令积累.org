# -*-mode:org;coding:utf-8-*-
# Created:  zhuji 02/11/2020
# Modified: zhuji 02/11/2020 22:01

#+OPTIONS: toc:nil num:nil
#+BIND: org-html-link-home "https://zhujing0227.github.io/images"
#+TITLE: Linux 命令积累

#+begin_export md
---
layout: post
title: Linux 命令积累
categories: Linux
tags: [Linux]
comments: true
description: some commands used frequently
---
#+end_export

* 常用命令 
  + 显示文件中查找内容的上下文
    #+begin_example
    `grep -C 5 pattern file`,显示 file 文件中匹配 pattern 上下 5 行
    `grep -B 5 pattern file`,显示 file 文件中匹配 pattern 前 5 行
    `grep -A 5 pattern file`,显示 file 文件中匹配 pattern 后 5 行
    #+end_example

  + 显示目前所有文件系统的可用空间及使用情形
    #+begin_example
    `df -h`
    #+end_example

  + 查询文件或文件夹的磁盘使用空间
    #+begin_example
    `du -sh *`
    #+end_example

  + nohup 后台运行服务
    #+begin_example
    `nohup java -jar jenkins.war &`
    #+end_example

  + scp 命令, 远程复制文件
    #+begin_quote
    [scp 命令](http://www.cnblogs.com/hitwtx/archive/2011/11/16/2251254.html)
    #+end_quote
    #+begin_example
    把当前一个文件 copy 到远程另外一台主机上：`scp /home/Users/zhuji/jenkins.war root@192.168.128.130:/home/root`, 然后会提示你输入另外那台 172.19.2.75 主机的 root 用户的登录密码, 接着就开始 copy 了.
    把文件从远程主机 copy 到当前系统:`scp root@192.168.128.130:/home/root/jenkins.war /home/Users/zhuji`
    #+end_example

  + 统计文件中某个字符串出现的次数
    #+begin_example
    `grep objstr filename | wc -l`
    统计多个字符串出现的次数 `grep -o ‘objStr1\|objStr2'  filename|wc -l  #直接用\| 链接起来即可`
    #+end_example

  + 使用 vim 统计
    #+begin_example
    `:%s/objstr//gn`
    #+end_example

  + 批量杀掉筛选的进程
    #+begin_example
    `ps -ef | grep lantern | grep -v grep | awk '{print $2}' | xargs kill -9`
    grep -v grep-v 显示不包含匹配文本的所有行, 在这里为筛选出所有不包含 grep 名称的进程
    awk '{print $2}'将上一步中过滤得到的进程进行打印, $2 表示打印第二个域(PID, 进程号) $0 表示所有域,$1 表示第一个域, $n 表示第 n 个域
    xargs 命令是给命令传递参数的过滤器, 善于把标准数据数据转换成命令行参数. 在这里则是将获取前一个命令的标准输出然后转换成命令行参数传递给后面的 kill 命令
    #+end_example

  + shell 终端快捷键
    #+begin_example
      ctrl+a:跳到本行的行首
      ctrl+e:跳到页尾
      Ctrl+u：删除当前光标前面的文字 （还有剪切功能）
      ctrl+k：删除当前光标后面的文字(还有剪切功能)
      Ctrl+L：进行清屏操作
      Ctrl+y:粘贴 Ctrl+u 或 ctrl+k 剪切的内容
      Ctrl+w:删除光标前面的单词的字符
      Alt – d：由光标位置开始，往右删除单词。往行尾删

      Ctrl – p：显示当前命令的上一条历史命令
      Ctrl – n：显示当前命令的下一条历史命令
      Ctrl – r：搜索历史命令，随着输入会显示历史命令中的一条匹配命令，Enter 键执行匹配命令；ESC 键在命令行显示而不执行匹配命令。
      Ctrl – g：从历史搜索模式（Ctrl – r）退出

      Ctrl – c：终止命令
      Ctrl – z：挂起命令
    #+end_example

  + lsof -i :8080

  + tmuxinator
    1. https://github.com/tmuxinator/tmuxinator
    2. tmux 配置
    #+begin_example
    ####################################
    # Global
    ####################################
    # Tmux Prefix
    unbind C-b
    set -g prefix C-a

    # Unbind default suspend
    unbind C-z
    bind M-q confirm-before -p "suspend-client #W? (y/n)" suspend-client

    # Default Shell
    set -g default-shell "/bin/zsh"
    set -g default-command "/bin/zsh"

    # edit configuration
    bind e new-window -n '~/.tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"
    # reload this on 'r'
    bind r source-file ~/.tmux.conf \; display '.tmux.conf sourced'

    # Shorten input delay (tmux normally adds a short delay on inputs)
    set -s escape-time 10                     # faster command sequences
    set -sg repeat-time 600                   # increase repeat timeout
    set -s focus-events on                    # If we want Vim to be told about focus: http://git.io/2UqSgQ
    set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
    setw -q -g utf8 on

    # bells and monitoring
    set -g visual-silence on
    set -g visual-bell on
    set -g bell-action any
    # activity
    set -g monitor-activity on
    set -g visual-activity off

    # tmux-resurrect
    set -g @resurrect-save-bash-history 'on'
    set -g @resurrect-capture-pane-contents 'on'
    set -g @resurrect-strategy-vim 'session'

    set -g mouse on               # Enable mouse support

    ####################################
    # UI
    ####################################
    set -g status-interval 10     # redraw status line every 10 seconds
    # statusbar
    set-option -g status on
    set-option -g status-interval 2
    set-option -g status-justify "centre"
    set-option -g status-left-length 60
    set-option -g status-right-length 90
    set-option -g status-left "#(~/.tmux-powerline/powerline.sh left)"
    set-option -g status-right "#(~/.tmux-powerline/powerline.sh right)"
    set-option -g status-bg black #base02
    set-option -g status-fg white #yellow
    set-option -g status-style none

    # default window title colors
    set-window-option -g window-status-style fg=brightblue #base0
    set-window-option -g window-status-style bg=default

    # active window title colors
    set-window-option -g window-status-current-style fg=white #orange
    set-window-option -g window-status-current-style bg=default

    # pane border
    set-option -g pane-border-style fg=green #base02
    set-option -g pane-active-border-style fg=blue #base01

    # message text
    set-option -g message-style bg=black #base02
    set-option -g message-style fg=brightred #orange

    # pane number display
    set-option -g display-panes-active-colour blue #blue
    set-option -g display-panes-colour brightred #orange

    # clock
    set-window-option -g clock-mode-colour green #green

    # fix resizing
    setw -g aggressive-resize on

    ####################################
    # Session
    ####################################
    # find session
    bind -r f command-prompt -p find-session 'switch-client -t %%'

    bind -r n command-prompt "new-session -s'%%'"

    ####################################
    # Window
    ####################################
    set -g base-index 1           # start windows numbering at 1
    setw -g automatic-rename off   # rename window to reflect current program
    set -g renumber-windows on    # renumber windows when a window is closed

    # window navigation
    bind -r M-w        confirm-before -p "kill-window #W? (y/n)" kill-window  # kill window

    # window navigation
    bind -r Tab last-window     # move to last active window
    bind -r [   previous-window # select previous window
    bind -r ]   next-window     # select next window

    # Ctrl-Shift-Left/Right: Move window
    bind -r M-[ swap-window -t -1
    bind -r M-] swap-window -t +1

    ####################################
    # Pane
    ####################################
    setw -g pane-base-index 1     # make pane numbering consistent with windows
    set -g display-panes-time 800 # slightly longer pane indicators display time
    set -g display-time 1000      # slightly longer status messages display time

    # pane navigation
    bind -r h select-pane -L  # move left
    bind -r l select-pane -R  # move right
    bind -r j select-pane -D  # move down
    bind -r k select-pane -U  # move up

    bind -r left  select-pane -L  # move left
    bind -r up    select-pane -D  # move down
    bind -r down  select-pane -U  # move up
    bind -r right select-pane -R  # move right

    bind -r > swap-pane -D   # swap current pane with the next one
    bind -r < swap-pane -U   # swap current pane with the previous one

    bind -r Space last-pane      # move last pane
    bind -r M-x confirm-before -p "kill-pane #P? (y/n)" kill-pane  # kill pane

    # Resize pane
    bind -r M-h resize-pane -L 2
    bind -r M-j resize-pane -D 2
    bind -r M-k resize-pane -U 2
    bind -r M-l resize-pane -R 2

    bind -r M-left  resize-pane -L 2
    bind -r M-up    resize-pane -U 2
    bind -r M-down  resize-pane -D 2
    bind -r M-right resize-pane -R 2

    # Synchronize
    bind -r "`" setw synchronize-panes on
    bind -r "\~" setw synchronize-panes off

    # Clear both screen and history
    bind -n C-l send-keys C-l \; run 'sleep 0.05 && tmux clear-history'

    # make scrolling with wheels work
    bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
    bind -n WheelDownPane select-pane -t= \; send-keys -M

    ####################################
    # list choice (tmux < 2.4)
    ####################################
    # vi copying
    setw -g mode-keys vi
    # vi-choice is gone in tmux >= 2.4
    run -b 'tmux bind -t vi-choice h tree-collapse 2> /dev/null || true'
    run -b 'tmux bind -t vi-choice l tree-expand 2> /dev/null || true'
    run -b 'tmux bind -t vi-choice K start-of-list 2> /dev/null || true'
    run -b 'tmux bind -t vi-choice J end-of-list 2> /dev/null || true'
    run -b 'tmux bind -t vi-choice H tree-collapse-all 2> /dev/null || true'
    run -b 'tmux bind -t vi-choice L tree-expand-all 2> /dev/null || true'
    run -b 'tmux bind -t vi-choice Escape cancel 2> /dev/null || true'
    ####################################
    # edit mode (tmux < 2.4)
    ####################################
    # vi-edit is gone in tmux >= 2.4
    run -b 'tmux bind -ct vi-edit H start-of-line 2> /dev/null || true'
    run -b 'tmux bind -ct vi-edit L end-of-line 2> /dev/null || true'
    run -b 'tmux bind -ct vi-edit q cancel 2> /dev/null || true'
    run -b 'tmux bind -ct vi-edit Escape cancel 2> /dev/null || true'
    ####################################
    # copy mode
    ####################################
    bind Enter copy-mode # enter copy mode
    bind b list-buffers  # list paster buffers
    bind p paste-buffer  # paste from the top pate buffer
    bind P choose-buffer # choose which buffer to paste from
    run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
    run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
    run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
    run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
    run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
    run -b 'tmux bind -T copy-mode-vi y send -X copy-selection 2> /dev/null || true'
    run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
    run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
    run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
    run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'
    # copy to Mac OSX pasteboard
    #if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run"tmux save-buffer - | reattach-to-user-namespace pbcopy"'
    # fix pbcopy/pbpaste
    if 'command -v reattach-to-user-namespace >/dev/null' \
        'set -gq @osx-pasteboard true'
    if 'tmux show -gv @osx-clipboard' \
        'set -g default-command "reattach-to-user-namespace -l $SHELL"'
    # Copy top of tmux paste buffer stack to OS clipboard.
    # Alternatively, this will always immediately copy to system pasteboard:
    # bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
    if 'tmux show -gv @osx-clipboard' \
        'bind y run "tmux save-buffer - | reattach-to-user-namespace pbcopy"'

    ####################################
    # Plugin
    ####################################
    # urlview
    bind u run "cut -c3- ~/.tmux.conf | sh -s _urlview #{pane_id}"

    # List of plugins
    # Supports `github_username/repo` or full git repo URLs
    set -g @tpm_plugins '              \
    tmux-plugins/tpm                 \
    tmux-plugins/tmux-sensible       \
    tmux-plugins/tmux-copycat        \
    tmux-plugins/tmux-yank           \
    tmux-plugins/tmux-urlview        \
    tmux-plugins/tmux-resurrect      \
    '

    # Other examples:
    # github_username/plugin_name    \
    # git@github.com/user/plugin     \
    # git@bitbucket.com/user/plugin  \

    # resurrect
    set -g @resurrect-strategy-vim 'session'
    set -g @resurrect-strategy-nvim 'session'
    set -g @resurrect-capture-pane-contents 'on'

    # continuum
    set -g @continuum-restore 'on'
    set -g @continuum-boot 'on'
    set -g @continuum-boot-options 'iterm,fullscreen'

    ####################################
    # user defined overrides
    ####################################
    # -- clipboard -----------------------------------------------------------------

    # in copy mode, copying selection also copies to the OS clipboard
    #   - true
    #   - false (default)
    # on macOS, this requires installing reattach-to-user-namespace, see README.md
    # on Linux, this requires xsel or xclip
    tmux_conf_copy_to_os_clipboard=true


    # -- user customizations -------------------------------------------------------
    # this is the place to override or undo settings

    # increase history size
    set -g history-limit 10000

    # start with mouse mode enabled
    set -g mouse on

    # force Vi mode
    #   really you should export VISUAL or EDITOR environment variable, see manual
    set -g status-keys vi
    set -g mode-keys vi

    # replace C-b by C-a instead of using both prefixes
    set -gu prefix2
    # unbind C-a
    unbind C-b
    set -g prefix C-a
    bind C-a send-prefix

    # Use Alt-arrow keys to switch panes
    bind -n M-Left select-pane -L
    bind -n M-Right select-pane -R
    bind -n M-Up select-pane -U
    bind -n M-Down select-pane -D

    # Shift arrow to switch windows
    bind -n S-Left previous-window
    bind -n S-Right next-window

    # Set easier window split keys
    # split or new window path perserve
    bind -r "-" split-window -c "#{pane_current_path}"
    bind -r "\\" split-window -h -c "#{pane_current_path}"

    # Easy config reload
    bind-key r source-file ~/.tmux.conf \; display-message "tmux.conf reloaded"

    #关闭 rename 机制
    setw -g automatic-rename off
    setw -g allow-rename off
    set-window-option -g automatic-rename off
    set-option -g allow-rename off

    # toggle pane title visibility
    bind P run 'zsh -c "arr=( off top ) && tmux setw pane-border-status \${arr[\$(( \${arr[(I)#{pane-border-status}]} % 2 + 1 ))]}"'
    setw -g pane-border-status top
    # rename pane
    bind p command-prompt -p "(rename-pane)" -I "#T" "select-pane -T '%%'"



    # -- 8< ------------------------------------------------------------------------
    # Initializes TMUX plugin manager.
    # Keep this line at the very bottom of tmux.conf.
    run-shell '~/.tmux/plugins/tpm/tpm'

    ####################################
    # Function
    ####################################
    # EOF
    #
    # # exit the script if any statement returns a non-true return value
    # set -e
    # _urlview() {
    #   tmux capture-pane -J -S - -E - -b "urlview-$1" -t "$1"
    #   tmux split-window "tmux show-buffer -b urlview-$1 | urlview || true; tmux delete-buffer -b urlview-$1"
    # }
    #
    # "$@"
  #+end_example

  + percol
    1. https://github.com/mooz/percol

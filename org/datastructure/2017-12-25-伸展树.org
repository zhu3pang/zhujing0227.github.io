# -*-mode:org;coding:utf-8-*-
# Created:  zhuji 02/12/2020
# Modified: zhuji 02/12/2020 17:02

#+OPTIONS: toc:nil num:nil
#+BIND: org-html-link-home "https://zhujing0227.github.io/images"
#+TITLE: 伸展树

#+begin_export md
---
layout: post
title: 伸展树
categories: DataStructure
tags: [tree, Splay-Tree, data-structure]
comments: true
---
#+end_export


* 伸展树
  伸展树不会保证树一直是平衡的, 但 m 次的连续搜索操作的复杂度为 mlog(n)的量级, 平摊时间复杂度是 O(log n). 因而, 从平摊复杂度上看, 二叉查找树也是一种平衡二叉树.
  在查询到目标节点后, 伸展树会不断进行下面三种操作中的一个, 直到目标节点成为根节点.

** zig 操作
   当目标节点的父节点是根节点时, 进行一次单旋转, 将目标节点调整到根节点的位置.

** zig-zig 操作
   当目标节点、父节点和祖父节点成"zig-zig"构型(一字型)时, 进行一次 zig-zig 操作(双左/双右旋转), 将目标节点调整到祖父节点的位置.

** zig-zag 操作
   当目标节点、父节点和祖父节点成"zig-zag"构型(之字型)时, 进行一次 zig-zag 操作(左右/右左旋转), 将目标节点调整到祖父节点的位置.

* 伸展树的操作

** 旋转
   参考[红黑树的旋转](/datastructure/2017/12/25/红黑树/)

** 插入
   按二叉树插入的操作将节点插入正确位置, 再对该节点进行 spaly 操作, 使之成为根节点.

** 查找
   按二叉树查找的操作找到正确节点, 再对该节点进行 spaly 操作, 使之成为根节点后返回根节点.

** 删除
   按二叉树的操作找到正确节点, 再对该节点进行 spaly 操作, 使之成为根节点. 之后分两种情况考虑:
  -. 根节点只有一个子节点: 将根节点指向该子节点即可.
  -. 根节点有两个子节点: 将根节点指向左子节点, 将左子节点的最大节点 spaly 至新的根节点, 新的根节点的右子节点指向原根节点的右子节点

* Splay-Tree 实现
  #+BEGIN_SRC java
    public class SplayTree<T extends Comparable<? super T>> {

        private TreeNode<T> root;

        public SplayTree(){
            root = null;
        }

        public TreeNode<T> search(T t){
            splay(findNode(t));
            return root;
        }

        private TreeNode<T> findNode(T t){
            TreeNode<T> treeNode = this.root;
            while (treeNode != null && t.compareTo(treeNode.element) != 0){
                if (t.compareTo(treeNode.element) > 0){
                    treeNode = treeNode.right;
                }else if (t.compareTo(treeNode.element) < 0){
                    treeNode = treeNode.left;
                }
            }
            return treeNode;
        }

        //将目标节点移至根节点处, 再将根节点删除
        public void remove(T t){
            splay(findNode(t));
            if (root == null)
                return;

            if (root.left == null){
                root = root.right;
                root.parent = null;
            }else if (root.right == null) {
                root = root.left;
                root.parent = null;
            }else {
                TreeNode<T> right = root.right;
                root = root.left;
                root.parent = null;
                TreeNode<T> r = root;
                while (r.right != null){
                    r = r.right;
                }
                splay(r);
                root.right = right;
                right.parent = root;
            }
        }

        public void insert(T t){
            root = insert(t, root);
            root = splay(findNode(t));
        }

        private TreeNode<T> insert(T t, TreeNode<T> treeNode){
            if (treeNode == null){
                return new TreeNode<>(t);
            }
            int compareResult = t.compareTo(treeNode.element);

            if (compareResult > 0){
                treeNode.right = insert(t, treeNode.right);
                treeNode.right.parent = treeNode;
            }else if (compareResult < 0){
                treeNode.left = insert(t, treeNode.left);
                treeNode.left.parent = treeNode;
            }
            return treeNode;
        }

        /**
         ,* 展开目标节点,将目标节点移至根节点处
         ,*/
        private void splay(TreeNode<T> target){
            while (target != null && target != root){
                if (target.parent == root){
                    zig(target);
                }else if (target == target.parent.left){
                    //之字形
                    if (target.parent == target.parent.parent.right)
                        zigZag(target);
                    //一字型
                    else
                        zigZig(target);
                }else {
                    //一字型
                    if (target.parent == target.parent.parent.right)
                        zigZig(target);
                    //之字形
                    else
                        zigZag(target);
                }
            }
        }

        /**
         ,* zig: 当目标节点是根节点的左子节点或右子节点时, 进行一次单旋转, 将目标节点调整到根节点的位置
         ,*/
        private void zig(TreeNode<T> treeNode) {
            if (treeNode == treeNode.parent.left)
                rotateRight(treeNode.parent);
            else
                rotateLeft(treeNode.parent);
        }

        /**
         ,* "之"字形
         ,* zig-zag: 当目标节点、父节点和祖父节点成"zig-zag"构型(之字形)时, 进行一次双旋转, 将目标节点调整到祖父节点的位置
         ,*/
        private void zigZag(TreeNode<T> treeNode){
            if (treeNode == treeNode.parent.right &&
                treeNode.parent == treeNode.parent.parent.left) {
                doubleRotateLR(treeNode);
            }
            if (treeNode == treeNode.parent.left &&
                treeNode.parent == treeNode.parent.parent.right) {
                doubleRotateRL(treeNode);
            }
        }

        /**
         ,* "一"字形
         ,* zig-zig：当目标节点、父节点和祖父节点成"zig-zig"构型(一字形)时, 进行一次 zig-zig 操作, 将目标节点调整到祖父节点的位置
         ,*            3            3           3
         ,*          2           1           0
         ,*        1      ==>  0   2  ==>      1
         ,*      0                               2
         ,* @param treeNode 目标节点 0
         ,* @return
         ,*/
        private void zigZig(TreeNode<T> treeNode) {
            if (treeNode == treeNode.parent.left &&
                treeNode.parent == treeNode.parent.parent.left) {
                rotateRight(treeNode.parent.parent);
                rotateRight(treeNode.parent);
            }
            if (treeNode == treeNode.parent.right &&
                treeNode.parent == treeNode.parent.parent.right) {
                rotateLeft(treeNode.parent.parent);
                rotateLeft(treeNode.parent);
            }
        }

        /**
         ,* 左旋操作
         ,*      5
         ,*     A 6           ===>        6
         ,*      B 7                    5   7
         ,*         D                  A B   D
         ,*/
        private void rotateLeft(TreeNode<T> treeNode){
            if (treeNode == null)
                return;

            TreeNode<T> r = treeNode.right;
            if (r.left != null) {
                r.left.parent = treeNode;
            }
            treeNode.right = r.left;
            r.parent = treeNode.parent;
            if (treeNode.parent == null) {
                root = r;
            } else if (treeNode == treeNode.parent.left) {
                treeNode.parent.left = r;
            } else {
                treeNode.parent.right = r;
            }
            treeNode.parent = r;
            r.left = treeNode;
        }

        /**
         ,* 右旋操作
         ,*      5
         ,*    4   A     ===>        4
         ,*   3 B                  3   5
         ,*  D                    D   A B
         ,*/
        private void rotateRight(TreeNode<T> treeNode) {
            if (treeNode == null)
                return;

            TreeNode<T> l = treeNode.left;
            if (l.right != null){
                l.right.parent = treeNode;
            }
            treeNode.left = l.right;
            l.parent = treeNode.parent;
            if (treeNode.parent == null){
                root = l;
            } else if (treeNode == treeNode.parent.left){
                treeNode.parent.left = l;
            }else {
                treeNode.parent.right = l;
            }
            treeNode.parent = l;
            l.right = treeNode;
        }

        /**
         ,* 双旋 左旋 => 右旋
         ,*/
        private void doubleRotateLR(TreeNode<T> treeNode){
            rotateLeft(treeNode.parent);
            rotateRight(treeNode.parent);
        }

        /**
         ,* 双旋 右旋 => 左旋
         ,*/
        private void doubleRotateRL(TreeNode<T> treeNode){
            rotateRight(treeNode.parent);
            rotateLeft(treeNode.parent);
        }

        @ToString(exclude = "parent")
        @AllArgsConstructor
        private static class TreeNode<T>{
            T element;
            TreeNode<T> parent, left, right;
            TreeNode(T t){
                this(t, null, null, null);
            }
        }
    }

  #+END_SRC

** 测试

*** 初始化节点[0..9]
    ![](/assets/img/source/splay-tree/splay-tree-init.png)

*** 删除节点 2
    ![](/assets/img/source/splay-tree/splay-tree-delete2.png)

*** 删除节点 8
    ![](/assets/img/source/splay-tree/splay-tree-delete8.png)

* 参考:

[[https://zh.wikipedia.org/wiki/伸展树][伸展树]]
[[http://blog.csdn.net/u014634338/article/details/49586689][伸展树(Splay tree)图解与实现]]
[[./AVL 树][AVL 树 旋转]]

# -*-mode:org;coding:utf-8-*-
# Created:  zhuji 02/12/2020
# Modified: zhuji 02/12/2020 16:18

#+OPTIONS: toc:nil num:nil
#+BIND: org-html-link-home "https://zhujing0227.github.io/images"
#+TITLE: 排序之归并排序

#+begin_export md
---
layout: post
title: 排序之归并排序
categories: Algorithm
tags: [Algorithm, sort]
comments: true
---
#+end_export

* 归并排序
  1. 将序列每相邻两个数字进行归并操作, 形成 ceil(n/2)个序列, 排序后每个序列包含两/一个元素
  2. 若此时序列数不是 1 个则将上述序列再次归并, 形成 ceil(n/4)个序列, 每个序列包含四/三个元素
  3. 重复步骤 2, 直到所有元素排序完毕, 即序列数为 1

时间复杂度 O(nlg n), 空间复杂度 O(n)


伪代码:
#+begin_example
merger-sort(A,p,r):O(nlg n)

if p<r
   q=(p+r)/2
   merge-sort(A,p,q)
   merge-sort(A,p+1,r)
   merge(A,p,q,r)
***********************************
merge(A,p,q,r):     //p<=q<r

n1=q-p+1
n2=r-q
let L[1..n1+1] and R[1..n2+2] be new arrays
for i=1 to n1
   L[i]=A[p+i-1]
for i=1 to n2
   R[i]=A[q+j]

L[n1+1]=max
R[n2+1]=max

i=j=1
for k=p to q
   if L[i]<=R[j]
       A[k]=L[i++]
   else
       A[k]=R[j++]
#+end_example

** Java 实现
   #+BEGIN_SRC java
     /**
      ,* low 初始值=0, high 初始值 = arr.length()-1
      ,*/
     private static int[] mergeSort(int[] arr, int low, int high) {
         if (arr == null || low >= high) {
             return arr;
         }
         int mid = low + ((high - low) >>> 1);

         mergeSort(arr, low, mid);
         mergeSort(arr, mid + 1, high);
         //左右归并
         merge(arr, low, mid, high);

         return arr;
     }

     /**
      ,* 合并两个有序的子数组 A[low,mid] A[mid+1,high]
      ,*/
     private static void merge(int[] arr, int low, int mid, int high) {
         int[] tmp = new int[high - low + 1];
         int i = low, j = mid + 1, k = 0;

         while (i <= mid && j <= high) {
             if (arr[i] < arr[j]) {
                 tmp[k++] = arr[i++];
             } else {
                 tmp[k++] = arr[j++];
             }
         }

         while (i <= mid) {
             tmp[k++] = arr[i++];
         }
         while (j <= high) {
             tmp[k++] = arr[j++];
         }
         //copy tmp into arr from low limit (high-low+1)
         System.arraycopy(tmp, 0, arr, low, tmp.length);
     }
    #+END_SRC

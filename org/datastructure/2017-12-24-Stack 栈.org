# -*-mode:org;coding:utf-8-*-
# Created:  zhuji 02/12/2020
# Modified: zhuji 02/12/2020 16:44

#+OPTIONS: toc:nil num:nil
#+BIND: org-html-link-home "https://zhujing0227.github.io/images"
#+TITLE: Stack 栈

#+begin_export md
---
layout: post
title: Stack 栈
categories: DataStructure
tags: [stack, data-structure]
comments: true
---
#+end_export

* 栈
  LIFO (Last In, First Out), 后进先出的数据结构.

  主要方法:
  - push：在最顶层加入数据。
  - pop：返回并移除最顶层的数据。
  - top：返回最顶层数据的值，但不移除它。
  - isEmpty：返回一个布尔值，表示当前 stack 是否为空栈。

* Java 数组实现
  #+BEGIN_SRC java
    public class Stack {
        private int[] elementData = new int[10];
        private int top = -1;

        private boolean isEmpty(){
            return top == -1;
        }

        private void push(int x){
            if (top >= elementData.length - 1){
                throw new RuntimeException("stack overflow");
            }
            elementData[++top] = x;
        }

        private int pop(){
            if (isEmpty()){
                throw new RuntimeException("stack underflow");
            }
            return elementData[top--];
        }

        private int top(){
            return elementData(top);
        }
    }

  #+END_SRC

* Java 链表实现
  包含最小栈的实现
  #+BEGIN_SRC java
    class StackWithNode{
        private Node top;

        private boolean isEmpty(){ return top == null;}

        private void push(int x){
            if (isEmpty()){
                top = new Node(x, x);
                return;
            }
            top = new Node(x, x < top.min ? x : top.min, top);
        }

        private int pop(){
            if (isEmpty()){
                throw new RuntimeException("stack underflow");
            }
            int t = top.value;
            top = top.next;
            return t;
        }

        private int top(){return top.value;}

        private int min(){return top.min;}

        @ToString(exclude = "next")
        @AllArgsConstructor
        static class Node{
            int value;
            int min;    //栈的最小值
            Node next;  //指下前一节点
            Node(int value, int min){this(value, min, null)}
        }
    }

  #+END_SRC

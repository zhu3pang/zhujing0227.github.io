# -*-mode:org;coding:utf-8-*-
# Created:  zhuji 02/12/2020
# Modified: zhuji 02/12/2020 20:04

#+OPTIONS: toc:nil num:nil
#+BIND: org-html-link-home "https://zhujing0227.github.io/images"
#+TITLE: 利用 Redis 的 Sorted-Set 实现一个优先任务队列

#+begin_export md
---
layout: post
title: 利用 Redis 的 Sorted-Set 实现一个优先任务队列
categories: mixed
tags: [mixed]
comments: true
---
#+end_export

* 基本命令
使用 zset 实现一个优先任务队列实际上只需要下面三个命令, `ZADD、ZRANGE、ZREMRANGEBYRANK`, ZADD 用于往队列添加任务, ZRANGE 和 ZREMRANGEBYRANK 用于取任务. 取任务是分两步操作的, 不是原子操作, 并发下会出现任务重复抓取的情况. redis 客户端里可以使用 MULTI / EXEC 包围的事务, 在 Java 里可以将 ZRANGE 和 ZREMRANGEBYRANK 两步操作放在 lua 脚本里执行, 下面给出使用 spring-data-redis 的代码及测试样例.
#+BEGIN_SRC shell
  ZADD key score member [[score member] [score member] ...]

  MULTI
  ZRANGE key 0 0 WITHSCORES
  ZREMRANGEBYRANK task_list 0 0
  EXEC
#+END_SRC

* spring-redis+lua 脚本实现代码
  #+BEGIN_SRC java
    @Component
    @SuppressWarnings({"rawtypes", "unchecked"})
    public class RedisPriorityQueue {

        private final RedisTemplate redisTemplate;

        @Autowired
        public RedisPriorityQueue(RedisTemplate redisTemplate) {
            this.redisTemplate = redisTemplate;
        }


        public void zadd(String key, double score, Object member) {
            redisTemplate.boundZSetOps(key).add(member, score);
        }

        public <T> List<T> zpop(String key) {
            String script = "local items = redis.call('ZREVRANGE', KEYS[1], 0, 0)\n" +
                    "if next(items) ~= nil then\n" +
                    "   redis.call('zrem', KEYS[1], unpack(items))\n" +
                    "end\n" +
                    "return items";

            return (List<T>) redisTemplate.execute(new DefaultRedisScript<>(script, List.class), Lists.newArrayList(key));
        }

        public <T> List<T> zpopSome(String key, long start, long end) {
            String script = "local items = redis.call('ZREVRANGE', KEYS[1], %d, %d)\n" +
                    "if next(items) ~= nil then\n" +
                    "   redis.call('zrem', KEYS[1], unpack(items))\n" +
                    "end\n" +
                    "return items";
            script = String.format(script, start, end);

            return (List<T>) redisTemplate.execute(new DefaultRedisScript<>(script, List.class), Lists.newArrayList(key));
        }

        public long size(String key) {
            return Optional.ofNullable(redisTemplate.boundZSetOps(key).zCard()).orElse(0L);
        }
    }
  #+END_SRC

** 测试
   #+BEGIN_SRC java
     @RunWith(SpringJUnit4ClassRunner.class)
     @SpringBootTest
     public class RedisPriorityQueueTest {

         @Autowired
         private RedisPriorityQueue redisPriorityQueue;

         @Test
         public void zadd() {
             redisPriorityQueue.zadd("test_zset", 1, "a");
             redisPriorityQueue.zadd("test_zset", 2, "b");
             redisPriorityQueue.zadd("test_zset", 3, "c");
             redisPriorityQueue.zadd("test_zset", 4, "d");
             assertEquals(redisPriorityQueue.size("test_zset"), 4);
         }

         @Test
         public void zpop() {
             List<String> list = redisPriorityQueue.zpop("test_zset");
             assertEquals(list.size(), 1);
             assertEquals(list.get(0), "d");
         }

         @Test
         public void zpopSome() {
             List<String> list = redisPriorityQueue.zpopSome("test_zset", 0, 2);
             assertEquals(list.size(), 3);
             assertEquals(redisPriorityQueue.size("test_zset"), 1);
             System.out.println(list);
         }
     }
  #+END_SRC

# -*-mode:org;coding:utf-8-*-
# Created:  zhuji 02/12/2020
# Modified: zhuji 02/12/2020 16:36

#+OPTIONS: toc:nil num:nil
#+BIND: org-html-link-home "https://zhujing0227.github.io/images"
#+TITLE: 排序之堆排序

#+begin_export md
---
layout: post
title: 排序之堆排序
categories: Algorithm
tags: [Algorithm, sort]
comments: true
---
#+end_export

* 堆排序
  堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法.堆积是一个近似完全二叉树的结构, 并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点.

** 堆
   堆（二叉堆）可以视为一棵完全的二叉树, 完全二叉树的一个“优秀”的性质是, 除了最底层之外, 每一层都是满的, 这使得堆可以利用数组来表示（普通的一般的二叉树通常用链表作为基本容器表示）, 每一个结点对应数组中的一个元素.

   堆节点的访问
  - Parent(i) = floor((i-1)/2), i 的父节点下标
  - Left(i) = 2i + 1, i 的左子节点下标
  - Right(i) = 2(i + 1), i 的右子节点下标

** 最大堆:
  - 最大堆中的最大元素值出现在根结点（堆顶）
  - 堆中每个父节点的元素值都大于等于其孩子结点（如果存在）

** 最小堆:
  - 最小堆中的最小元素值出现在根结点（堆顶）
  - 堆中每个父节点的元素值都小于等于其孩子结点（如果存在）

* 最大堆排序
  把最大堆堆顶的最大数取出, 将剩余的堆继续调整为最大堆, 再次将堆顶的最大数取出, 这个过程持续到剩余数只有一个时结束.在堆中定义以下几种操作：
  
  - 最大堆调整（Max-Heapify）：将堆的末端子节点作调整, 使得子节点永远小于父节点
  - 创建最大堆（Build-Max-Heap）：将堆所有数据重新排序, 使其成为最大堆
  - 堆排序（Heap-Sort）：移除位在第一个数据的根节点, 并做最大堆调整的递归运算

  伪代码:
  #+begin_example
  heap-sort(A):O(nlgn)
    build-max-heap(A)
    for i = A.length downto 2
        exchange A[1] with A[i]
        A.heap-size --
        max-heapify(1)

  #+end_example

** Java 实现最大堆排序
   heapInsert(key)、maximum()、extractMaximum()、increaseKey(index, key)为最大优先队列的操作
   #+BEGIN_SRC java
     public class MaxHeapSort {

         private int[] heap;
         private int heapSize;

         /**
          ,* 返回最大元素
          ,*  heap-maximum(A)
          ,*      return A[1]
          ,* @return
          ,*/
         public int heapMaximun() {
             return heap[0];
         }

         /**
          ,* 删除并返回最大元素
          ,*  heap-eatract-max(A)
          ,*      assert heapsize >= 1
          ,*      max = A[1]
          ,*      A[1] = A[heapsize--]
          ,*      max-heapify(1)
          ,*      return max
          ,* @return
          ,*/
         public int heapExtractMax() {
             if (heapSize < 1) {
                 throw new RuntimeException("heap underflow");
             }
             int max = heap[0];
             heap[0] = heap[--heapSize];
             maxHeapify(0);
             return max;
         }

         /**
          ,* 增长位置 i 处元素至 key
          ,*  heap-increase-key(A, i, k)
          ,*      assert A[i] <= k
          ,*      A[i] = key
          ,*      while i > 1 and A[parent(i)] < A[i]
          ,*          exchange A[parent(i)] with A[i]
          ,*          i = parent(i)
          ,* @param i
          ,* @param key
          ,*/
         public void heapIncreaseKey(int i, int key) {
             if (key < heap[i]) {
                 throw new RuntimeException("new key is smaller than the current key");
             }
             heap[i] = key;
             //如果父节点比 key 小, then swap them, until reach the root
             while (i > 0 && heap[(i - 1) >>> 1] < heap[i]) {
                 swap(i, (i - 1) >>> 1);
                 i = (i - 1) >>> 1;
             }
         }

         /**
          ,* 插入元素 key
          ,*  max-heap-insert(A, k)
          ,*      A[++heapsize] = k
          ,*      heap-increase-key(A, heapsize, k)
          ,* @param key
          ,*/
         public void heapInsert(int key) {
             //扩容
             if (heapSize >= heap.length) {
                 int[] newHeap = new int[heapSize << 1];
                 System.arraycopy(heap, 0, newHeap, 0, heapSize);
                 heap = newHeap;
             }
             heap[heapSize++] = key;
             heapIncreaseKey(heapSize - 1, key);
         }

         /**
          ,* 维护最大堆的性质
          ,*  max-heapify(A, i)
          ,*      l = Left(i), r = Right(i), smallest = i
          ,*      if l <= heapsize and A[l] > A[smallest]
          ,*          smallest = l
          ,*      if r <= heapsize and A[r] > A[smallest]
          ,*          smallest = r
          ,*      if smallest != i
          ,*          exchange A[i] with A[smallest]
          ,*          max-heapify(A, smallest)
          ,* @param i
          ,*/
         private void maxHeapify(int i) {
             int leftChild = (i << 1) + 1, rightChild = (i + 1) << 1, smallest = i;
             if (leftChild < heapSize && heap[leftChild] > heap[smallest]) {
                 smallest = leftChild;
             }
             if (rightChild < heapSize && heap[rightChild] > heap[smallest]) {
                 smallest = rightChild;
             }
             if (smallest != i) {
                 swap(i, smallest);
                 maxHeapify(smallest);
             }
         }

         /**
          ,* 构建最大堆
          ,*  build-max-heap(A)
          ,*      heapsize = A.length
          ,*      for i = A.length/2 down to 1
          ,*          max-heapify(A, i)
          ,* @param heap
          ,*/
         private void buildMaxHeap(int[] heap) {
             this.heap = heap;
             heapSize = heap.length;
             for (int i = heapSize >>> 1; i >= 0; i--) {
                 maxHeapify(i);
             }
         }

         /**
          ,* 升序排序 O(nlg n)
          ,*
          ,* @param heap
          ,*/
         private int[] heapSortWithMaxHeap(int[] heap) {
             buildMaxHeap(heap);
             for (; --heapSize > 0; ) {
                 swap(0, heapSize);
                 maxHeapify(0);
             }
             return heap;
         }

         private void swap(int i, int j){
             int t = heap[i];
             heap[i] = heap[j];
             heap[j] = t;
         }

         @Override
         public String toString() {
             return Arrays.stream(heap)
                     .limit(heapSize)
                     .mapToObj(i -> ((Integer) i).toString())
                     .collect(Collectors.joining(", ", "[", "]"));
         }
     }

   #+END_SRC

* 最小堆排序
  把最小堆堆顶的最小数取出, 将剩余的堆继续调整为最小堆, 再次将堆顶的最小数取出, 这个过程持续到剩余数只有一个时结束.在堆中定义以下几种操作：

  - 最小堆调整（Min-Heapify）：将堆的末端子节点作调整, 使得子节点永远大于父节点
  - 创建最小堆（Build-Min-Heap）：将堆所有数据重新排序, 使其成为最小堆
  - 堆排序（Heap-Sort）：移除位在第一个数据的根节点, 并做最小堆调整的递归运算

伪代码:
#+begin_example
heap-sort(A):O(nlgn)
    build-min-heap(A)
    for i = A.length downto 2
        exchange A[1] with A[i]
        A.heap-size --
        min-heapify(1)
#+end_example

** Java 实现最小堆排序
   heapInsert(key)、minimum()、extractMinimum()、decreaseKey(index, key)为最小优先队列的操作
   #+BEGIN_SRC java
     public class MinHeapSort {
         private int[] heap;
         private int heapSize;

         /**
          ,* 返回最小元素
          ,*  heap-minimum(A)
          ,*     return A[1]
          ,* @return
          ,*/
         public int heapMinimum() {
             return heap[0];
         }

         /**
          ,* 删除并返回最小元素
          ,*  heap-eatract-min(A)
          ,*      assert heapsize >= 1
          ,*      min = A[1]
          ,*      A[1] = A[heapsize--]
          ,*      min-heapify(1)
          ,*      return min
          ,* @return
          ,*/
         public int heapExtractMinimum() {
             if (heapSize < 1) {
                 throw new RuntimeException("heap underflow");
             }
             int min = heap[0];
             heap[0] = heap[--heapSize];
             minHeapify(0);
             return min;
         }

         /**
          ,* 减小 i 处元素至 key
          ,*  heap-decrease-key(A, i, k)
          ,*      assert A[i] >= k
          ,*      A[i] = key
          ,*      while i > 1 and A[parent(i)] > A[i]
          ,*          exchange A[parent(i)] with A[i]
          ,*          i = parent(i)
          ,* @param i
          ,* @param key
          ,*/
         public void heapDecreaseKey(int i, int key) {
             if (key > heap[i]) {
                 throw new RuntimeException("new key is larger than the current key");
             }
             heap[i] = key;
             //if 父节点比 key 大, then swap them, until reach the root
             while (i > 0 && heap[(i - 1) >>> 1] > heap[i]) {
                 swap(i, (i - 1) >>> 1);
                 i = (i - 1) >>> 1;
             }
         }

         /**
          ,* 插入元素 key
          ,*  min-heap-insert(A, k)
          ,*      A[++heapsize] = k
          ,*      heap-decrease-key(A, heapsize, k)
          ,* @param key
          ,*/
         private void heapInsert(int key) {
             //扩容
             if (heapSize >= heap.length) {
                 int[] newHeap = new int[heapSize << 1];
                 System.arraycopy(heap, 0, newHeap, 0, heapSize);
                 heap = newHeap;
             }
             heap[heapSize++] = key;
             heapDecreaseKey(heapSize - 1, key);
         }

         /**
          ,* 维护最小堆的性质
          ,*  min-heapify(A, i)
          ,*      l = Left(i), r = Right(i), smallest = i
          ,*      if l <= heapsize and A[l] < A[smallest]
          ,*          smallest = l
          ,*      if r <= heapsize and A[r] < A[smallest]
          ,*          smallest = r
          ,*      if smallest != i
          ,*          exchange A[i] with A[smallest]
          ,*          max-heapify(A, smallest)
          ,* @param i
          ,*/
         public void minHeapify(int i) {
             int leftChild = (i << 1) + 1, rightChild = (i + 1) << 1, smallest = i;
             if (leftChild < heapSize && heap[leftChild] < heap[i]) {
                 smallest = leftChild;
             }
             if (rightChild < heapSize && heap[rightChild] < heap[i]) {
                 smallest = rightChild;
             }
             if (smallest != i) {
                 swap(i, smallest);
                 minHeapify(smallest);
             }
         }

         /**
          ,* 构建最小堆
          ,*  build-min-heap(A)
          ,*      heapsize = A.length
          ,*      for i = A.length/2 down to 1
          ,*          min-heapify(A, i)
          ,*/
         private void buildMinHeap() {
             this.heap = heap;
             heapSize = heap.length;
             for (int i = heapSize >>> 1; i >= 0; i--) {
                 minHeapify(i);
             }
         }

         /**
          ,* 降序排序 O(nlg n)
          ,*   heap-sort(A):O(nlgn)
          ,*       build-max-heap(A)
          ,*       for i = A.length downto 2
          ,*           exchange A[1] with A[i]
          ,*           A.heap-size --
          ,*           max-heapify(1)
          ,* @param heap
          ,*/
         public int[] heapSortWithMinHeap(int[] heap) {
             buildMinHeap();
             for (; --heapSize > 0; ) {
                 swap(0, heapSize);
                 minHeapify(0);
             }
             return heap;
         }

         private void swap(int i, int j){
             int t = heap[i];
             heap[i] = heap[j];
             heap[j] = t;
         }

         @Override
         public String toString() {
             return Arrays.stream(heap)
                     .limit(heapSize)
                     .mapToObj(i -> ((Integer) i).toString())
                     .collect(Collectors.joining(", ", "[", "]"));
         }
     }

  #+END_SRC
